// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(CUSTOMER)
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  orders    Order[]
  bookings  Booking[]
  
  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  slug        String    @unique
  image       String?
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  products    Product[]
  
  @@map("categories")
}

model Product {
  id          String    @id @default(cuid())
  name        String
  description String?
  price       Float
  salePrice   Float?
  sku         String?   @unique
  stock       Int       @default(0)
  images      String?
  active      Boolean   @default(true)
  featured    Boolean   @default(false)
  categoryId  String?
  metadata    Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  category    Category? @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
  
  @@map("products")
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  userId          String?
  customerEmail   String
  customerName    String
  customerPhone   String?
  status          OrderStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentId       String?
  subtotal        Float
  tax             Float       @default(0)
  shipping        Float       @default(0)
  total           Float
  shippingAddress Json?
  billingAddress  Json?
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  user            User?       @relation(fields: [userId], references: [id])
  items           OrderItem[]
  
  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
  
  @@map("order_items")
}

model Service {
  id          String    @id @default(cuid())
  name        String
  description String?
  duration    Int       // in minutes
  price       Float
  active      Boolean   @default(true)
  category    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  bookings    Booking[]
  
  @@map("services")
}

model Booking {
  id            String        @id @default(cuid())
  userId        String?
  serviceId     String
  customerName  String
  customerEmail String
  customerPhone String
  date          DateTime
  timeSlot      String
  status        BookingStatus @default(CONFIRMED)
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  user          User?         @relation(fields: [userId], references: [id])
  service       Service       @relation(fields: [serviceId], references: [id])
  
  @@map("bookings")
}

model Content {
  id        String      @id @default(cuid())
  type      ContentType
  title     String
  slug      String      @unique
  content   String?
  metadata  Json?
  published Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  
  @@map("content")
}

model Setting {
  id    String @id @default(cuid())
  key   String @unique
  value String
  type  String @default("string")
  
  @@map("settings")
}

enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum BookingStatus {
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum ContentType {
  PAGE
  BLOG_POST
  BANNER
  FAQ
}